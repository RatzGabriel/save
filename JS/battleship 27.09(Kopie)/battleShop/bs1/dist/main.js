(()=>{"use strict";const e=function(){let e=[["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""]],t=[],r=[],a=0;return{placeShip:(r,a,l)=>{if(r>e.length||a>e[r].length)return alert("not possible");let n=function(e,t,r){let a=r,l=0,n={x:[],y:[t]};for(let t=e;t<e+r;t++)n.x.push(t);return{isSunk:()=>l===a,hit:(e,t,r)=>{for(let a=0;a<n.x.length;a++)n.x[a]===e&&n.y==t&&"hit"!==n.x[a]&&(console.log("HIT"),r[e][t]="hit",n.x[a]="hit",l+=1)},shipLength:a,coords:n,tp:l}}(r,a,l);for(let t=r+n.shipLength-1;t>=r&&""===e[t][a];t--)e[t][a]="Ship";return t.push(n),e},board:e,receiveAttack:(e,l,n)=>{console.log(n);for(let o=0;o<t.length;o++)for(let i=0;i<t[o].coords.x.length;i++)if(t[o].coords.x[i]==e){if(t[o].coords.y==l)return t[o].hit(e,l,n),!0===t[o].isSunk()&&(a+=1,!0)}else r.push([e,l]);return t},ships:t}},t=function(){let t=e();return{placeShips:function(e,r,a){t.placeShip(e,r,a)},gameboardPlayer:t,placedShips:0}},r=(e,t,a,l)=>{let n=a.gameboardPlayer.board;e.innerHtml="",n.forEach(((n,o)=>{n.forEach(((n,i)=>{let c=document.createElement("div");c.className="cellDiv",c.innerText=n,c.addEventListener("click",(function(){l.gameboardPlayer.receiveAttack(o,i,l.gameboardPlayer.board),e.innerText="",t.innerText="",r(t,l,a),r(e,a,l)})),e.appendChild(c)}))}))},a=r;!function(){let e=t(),r=t();const l=document.getElementById("player"),n=document.getElementById("pc");e.gameboardPlayer.placeShip(2,3,3),e.gameboardPlayer.placeShip(2,4,3),e.gameboardPlayer.placeShip(2,6,3),r.gameboardPlayer.placeShip(3,2,3),r.gameboardPlayer.placeShip(4,6,3),r.gameboardPlayer.placeShip(1,1,3);a(n,l,r,e),a(l,n,e,r)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,